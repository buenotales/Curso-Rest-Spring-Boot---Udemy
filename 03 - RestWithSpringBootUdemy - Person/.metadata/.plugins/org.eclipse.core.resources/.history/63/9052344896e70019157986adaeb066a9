package br.com.erudio;

import javax.security.auth.message.callback.PrivateKeyCallback.Request;
import javax.websocket.server.PathParam;

import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import br.com.erudio.exception.UnsuportedMathOperationException;

@RestController
public class MathController {

	@RequestMapping(value="/sum/{value1}/{value2}", method=RequestMethod.GET)
	public Double sum (@PathVariable("value1") String n1, @PathVariable("value2") String n2) throws Exception {
		
		if(!isNumeric(n1) || !isNumeric(n2)) throw new Exception();
		
		Double sum = convertToDouble(n1) + convertToDouble(n2);
		
		return sum;
	}
	
	@RequestMapping(value="/sub/{value1}/{value2}", method=RequestMethod.GET)
	public Double sub(@PathParam("value1") String n1, @PathParam("value2") String n2) throws Exception {
		
		if(!isNumeric(n1) || !isNumeric(n2)) throw new Exception();
		
		Double sub = convertToDouble(n1) + convertToDouble(n2);
		
		return sub;
	}
	
	@RequestMapping(value="/mult/{value1}/{value2}", method=RequestMethod.GET)
	public Double mult(@PathParam("value1") String n1, @PathParam("value2") String n2) throws Exception {
		
		if(!isNumeric(n1) || !isNumeric(n2)) throw new Exception();
		
		Double mult = convertToDouble(n1) + convertToDouble(n2);
		
		return mult;
	}
	
	@RequestMapping(value="/div/{value1}/{value2}", method=RequestMethod.GET)
	public Double div(@PathParam("value1") String n1, @PathParam("value2") String n2) throws Exception {
		
		if(!isNumeric(n1) || !isNumeric(n2)) throw new UnsuportedMathOperationException("Please set a numeric value!");
		
		Double div = convertToDouble(n1) + convertToDouble(n2);
		
		return div;
	}

	private boolean isNumeric(String n) {

		if(n == null) return false;
		
		String aux = n.replaceAll(",", ".");
		
		return aux.matches("[-+]?[0-9]*\\.?[0-9]+");
	}

	private Double convertToDouble(String n) {
		
		if(n == null) return 0d;
		
		String aux = n.replaceAll(",", ".");
		
		if(isNumeric(aux)) return Double.parseDouble(aux);
		
		return 0d;
	}
	
}
